{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useContext, useEffect, useState } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport AppLoading from 'expo-app-loading';\nimport LoginScreen from \"./screens/LoginScreen\";\nimport SignupScreen from \"./screens/SignupScreen\";\nimport WelcomeScreen from \"./screens/WelcomeScreen\";\nimport { Colors } from \"./constants/styles\";\nimport AuthContextProvider, { AuthContext } from \"./store/auth-context\";\nimport IconButton from \"./components/ui/IconButton\";\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nvar Stack = createNativeStackNavigator();\nfunction AuthStack() {\n  return _jsxs(Stack.Navigator, {\n    screenOptions: {\n      headerStyle: {\n        backgroundColor: Colors.primary500\n      },\n      headerTintColor: 'white',\n      contentStyle: {\n        backgroundColor: Colors.primary100\n      }\n    },\n    children: [_jsx(Stack.Screen, {\n      name: \"Login\",\n      component: LoginScreen\n    }), _jsx(Stack.Screen, {\n      name: \"Signup\",\n      component: SignupScreen\n    })]\n  });\n}\nfunction AuthenticatedStack() {\n  var authCtx = useContext(AuthContext);\n  return _jsx(Stack.Navigator, {\n    screenOptions: {\n      headerStyle: {\n        backgroundColor: Colors.primary500\n      },\n      headerTintColor: 'white',\n      contentStyle: {\n        backgroundColor: Colors.primary100\n      }\n    },\n    children: _jsx(Stack.Screen, {\n      name: \"Welcome\",\n      component: WelcomeScreen,\n      options: {\n        headerRight: function headerRight(_ref) {\n          var tintColor = _ref.tintColor;\n          return _jsx(IconButton, {\n            icon: \"exit\",\n            color: tintColor,\n            size: 24,\n            onPress: authCtx.logout\n          });\n        }\n      }\n    })\n  });\n}\nfunction Navigation() {\n  var authCtx = useContext(AuthContext);\n  return _jsxs(NavigationContainer, {\n    children: [!authCtx.isAuthenticated && _jsx(AuthStack, {}), authCtx.isAuthenticated && _jsx(AuthenticatedStack, {})]\n  });\n}\nfunction Root() {\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    isTryingLogin = _useState2[0],\n    setIsTryingLogin = _useState2[1];\n  var authCtx = useContext(AuthContext);\n  useEffect(function () {\n    function fetchToken() {\n      var storedToken;\n      return _regeneratorRuntime.async(function fetchToken$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem('token'));\n          case 2:\n            storedToken = _context.sent;\n            if (storedToken) {\n              authCtx.authenticate(storedToken);\n            }\n            setIsTryingLogin(false);\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }, null, null, null, Promise);\n    }\n    fetchToken();\n  }, []);\n  if (isTryingLogin) {\n    return _jsx(AppLoading, {});\n  }\n  return _jsx(Navigation, {});\n}\nexport default function App() {\n  return _jsxs(_Fragment, {\n    children: [_jsx(StatusBar, {\n      style: \"light\"\n    }), _jsx(AuthContextProvider, {\n      children: _jsx(Root, {})\n    })]\n  });\n}","map":{"version":3,"names":["useContext","useEffect","useState","NavigationContainer","createNativeStackNavigator","StatusBar","AsyncStorage","AppLoading","LoginScreen","SignupScreen","WelcomeScreen","Colors","AuthContextProvider","AuthContext","IconButton","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Stack","AuthStack","Navigator","screenOptions","headerStyle","backgroundColor","primary500","headerTintColor","contentStyle","primary100","children","Screen","name","component","AuthenticatedStack","authCtx","options","headerRight","_ref","tintColor","icon","color","size","onPress","logout","Navigation","isAuthenticated","Root","_useState","_useState2","_slicedToArray","isTryingLogin","setIsTryingLogin","fetchToken","storedToken","_regeneratorRuntime","async","fetchToken$","_context","prev","next","awrap","getItem","sent","authenticate","stop","Promise","App","style"],"sources":["C:/MAMP/htdocs/makeponto/appfrontend/makepontoapp/App.js"],"sourcesContent":["import { useContext, useEffect, useState } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { StatusBar } from 'expo-status-bar';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport AppLoading from 'expo-app-loading';\n\nimport LoginScreen from './screens/LoginScreen';\nimport SignupScreen from './screens/SignupScreen';\nimport WelcomeScreen from './screens/WelcomeScreen';\nimport { Colors } from './constants/styles';\nimport AuthContextProvider, { AuthContext } from './store/auth-context';\nimport IconButton from './components/ui/IconButton';\n\nconst Stack = createNativeStackNavigator();\n\nfunction AuthStack() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerStyle: { backgroundColor: Colors.primary500 },\n        headerTintColor: 'white',\n        contentStyle: { backgroundColor: Colors.primary100 },\n      }}\n    >\n      <Stack.Screen name=\"Login\" component={LoginScreen} />\n      <Stack.Screen name=\"Signup\" component={SignupScreen} />\n    </Stack.Navigator>\n  );\n}\n\nfunction AuthenticatedStack() {\n  const authCtx = useContext(AuthContext);\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerStyle: { backgroundColor: Colors.primary500 },\n        headerTintColor: 'white',\n        contentStyle: { backgroundColor: Colors.primary100 },\n      }}\n    >\n      <Stack.Screen\n        name=\"Welcome\"\n        component={WelcomeScreen}\n        options={{\n          headerRight: ({ tintColor }) => (\n            <IconButton\n              icon=\"exit\"\n              color={tintColor}\n              size={24}\n              onPress={authCtx.logout}\n            />\n          ),\n        }}\n      />\n    </Stack.Navigator>\n  );\n}\n\nfunction Navigation() {\n  const authCtx = useContext(AuthContext);\n\n  return (\n    <NavigationContainer>\n      {!authCtx.isAuthenticated && <AuthStack />}\n      {authCtx.isAuthenticated && <AuthenticatedStack />}\n    </NavigationContainer>\n  );\n}\n\nfunction Root() {\n  const [isTryingLogin, setIsTryingLogin] = useState(true);\n\n  const authCtx = useContext(AuthContext);\n\n  useEffect(() => {\n    async function fetchToken() {\n      const storedToken = await AsyncStorage.getItem('token');\n\n      if (storedToken) {\n        authCtx.authenticate(storedToken);\n      }\n\n      setIsTryingLogin(false);\n    }\n\n    fetchToken();\n  }, []);\n\n  if (isTryingLogin) {\n    return <AppLoading />;\n  }\n\n  return <Navigation />;\n}\n\nexport default function App() {\n  \n  return (\n    <>\n      <StatusBar style=\"light\" />\n      <AuthContextProvider>\n        <Root />\n      </AuthContextProvider>\n    </>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}