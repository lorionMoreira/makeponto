{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useContext, useState } from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport AuthContent from \"../components/Auth/AuthContent\";\nimport LoadingOverlay from \"../components/ui/LoadingOverlay\";\nimport { AuthContext } from \"../store/auth-context\";\nimport { login } from \"../util/auth\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction LoginScreen() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isAuthenticating = _useState2[0],\n    setIsAuthenticating = _useState2[1];\n  var authCtx = useContext(AuthContext);\n  function loginHandler(_ref) {\n    var email, password, token;\n    return _regeneratorRuntime.async(function loginHandler$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          email = _ref.email, password = _ref.password;\n          setIsAuthenticating(true);\n          _context.prev = 2;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(login(email, password));\n        case 5:\n          token = _context.sent;\n          console.log(token);\n          authCtx.authenticate(token);\n          _context.next = 14;\n          break;\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](2);\n          Alert.alert(_context.t0);\n          setIsAuthenticating(false);\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }, null, null, [[2, 10]], Promise);\n  }\n  if (isAuthenticating) {\n    return _jsx(LoadingOverlay, {\n      message: \"Logging you in...\"\n    });\n  }\n  return _jsx(AuthContent, {\n    isLogin: true,\n    onAuthenticate: loginHandler\n  });\n}\nexport default LoginScreen;","map":{"version":3,"names":["useContext","useState","Alert","AuthContent","LoadingOverlay","AuthContext","login","jsx","_jsx","LoginScreen","_useState","_useState2","_slicedToArray","isAuthenticating","setIsAuthenticating","authCtx","loginHandler","_ref","email","password","token","_regeneratorRuntime","async","loginHandler$","_context","prev","next","awrap","sent","console","log","authenticate","t0","alert","stop","Promise","message","isLogin","onAuthenticate"],"sources":["C:/MAMP/htdocs/makeponto/appfrontend/makepontoapp/screens/LoginScreen.js"],"sourcesContent":["import { useContext, useState } from 'react';\r\nimport { Alert } from 'react-native';\r\n\r\nimport AuthContent from '../components/Auth/AuthContent';\r\nimport LoadingOverlay from '../components/ui/LoadingOverlay';\r\nimport { AuthContext } from '../store/auth-context';\r\nimport { login } from '../util/auth';\r\n\r\nfunction LoginScreen() {\r\n  const [isAuthenticating, setIsAuthenticating] = useState(false);\r\n\r\n  const authCtx = useContext(AuthContext);\r\n\r\n  async function loginHandler({ email, password }) {\r\n    setIsAuthenticating(true);\r\n    try {\r\n      const token = await login(email, password);\r\n      console.log(token)\r\n      \r\n      authCtx.authenticate(token);\r\n\r\n    } catch (error) {\r\n      Alert.alert(error);\r\n      setIsAuthenticating(false);\r\n    }\r\n  }\r\n\r\n  if (isAuthenticating) {\r\n    return <LoadingOverlay message=\"Logging you in...\" />;\r\n  }\r\n\r\n  return <AuthContent isLogin onAuthenticate={loginHandler} />;\r\n}\r\n\r\nexport default LoginScreen;\r\n"],"mappings":";;AAAA,SAASA,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,KAAA;AAG7C,OAAOC,WAAW;AAClB,OAAOC,cAAc;AACrB,SAASC,WAAW;AACpB,SAASC,KAAK;AAAuB,SAAAC,GAAA,IAAAC,IAAA;AAErC,SAASC,WAAWA,CAAA,EAAG;EACrB,IAAAC,SAAA,GAAgDT,QAAQ,CAAC,KAAK,CAAC;IAAAU,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAxDG,gBAAgB,GAAAF,UAAA;IAAEG,mBAAmB,GAAAH,UAAA;EAE5C,IAAMI,OAAO,GAAGf,UAAU,CAACK,WAAW,CAAC;EAEvC,SAAeW,YAAYA,CAAAC,IAAA;IAAA,IAAAC,KAAA,EAAAC,QAAA,EAAAC,KAAA;IAAA,OAAAC,mBAAA,CAAAC,KAAA,UAAAC,cAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAGR,KAAK,GAAAD,IAAA,CAALC,KAAK,EAAEC,QAAQ,GAAAF,IAAA,CAARE,QAAQ;UAC3CL,mBAAmB,CAAC,IAAI,CAAC;UAACU,QAAA,CAAAC,IAAA;UAAAD,QAAA,CAAAE,IAAA;UAAA,OAAAL,mBAAA,CAAAM,KAAA,CAEJrB,KAAK,CAACY,KAAK,EAAEC,QAAQ,CAAC;QAAA;UAApCC,KAAK,GAAAI,QAAA,CAAAI,IAAA;UACXC,OAAO,CAACC,GAAG,CAACV,KAAK,CAAC;UAElBL,OAAO,CAACgB,YAAY,CAACX,KAAK,CAAC;UAACI,QAAA,CAAAE,IAAA;UAAA;QAAA;UAAAF,QAAA,CAAAC,IAAA;UAAAD,QAAA,CAAAQ,EAAA,GAAAR,QAAA;UAG5BtB,KAAK,CAAC+B,KAAK,CAAAT,QAAA,CAAAQ,EAAM,CAAC;UAClBlB,mBAAmB,CAAC,KAAK,CAAC;QAAC;QAAA;UAAA,OAAAU,QAAA,CAAAU,IAAA;MAAA;IAAA,0BAAAC,OAAA;EAAA;EAI/B,IAAItB,gBAAgB,EAAE;IACpB,OAAOL,IAAA,CAACJ,cAAc;MAACgC,OAAO,EAAC;IAAmB,CAAE,CAAC;EACvD;EAEA,OAAO5B,IAAA,CAACL,WAAW;IAACkC,OAAO;IAACC,cAAc,EAAEtB;EAAa,CAAE,CAAC;AAC9D;AAEA,eAAeP,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}