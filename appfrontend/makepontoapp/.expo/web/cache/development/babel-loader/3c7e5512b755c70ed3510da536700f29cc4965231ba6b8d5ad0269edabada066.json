{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"../ui/Button\";\nimport Input from \"./Input\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction AuthForm(_ref) {\n  var isLogin = _ref.isLogin,\n    onSubmit = _ref.onSubmit,\n    credentialsInvalid = _ref.credentialsInvalid;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    enteredEmail = _useState2[0],\n    setEnteredEmail = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    enteredConfirmEmail = _useState4[0],\n    setEnteredConfirmEmail = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    enteredPassword = _useState6[0],\n    setEnteredPassword = _useState6[1];\n  var _useState7 = useState(''),\n    _useState8 = _slicedToArray(_useState7, 2),\n    enteredConfirmPassword = _useState8[0],\n    setEnteredConfirmPassword = _useState8[1];\n  var emailIsInvalid = credentialsInvalid.email,\n    emailsDontMatch = credentialsInvalid.confirmEmail,\n    passwordIsInvalid = credentialsInvalid.password,\n    passwordsDontMatch = credentialsInvalid.confirmPassword;\n  function updateInputValueHandler(inputType, enteredValue) {\n    switch (inputType) {\n      case 'email':\n        setEnteredEmail(enteredValue);\n        break;\n      case 'confirmEmail':\n        setEnteredConfirmEmail(enteredValue);\n        break;\n      case 'password':\n        setEnteredPassword(enteredValue);\n        break;\n      case 'confirmPassword':\n        setEnteredConfirmPassword(enteredValue);\n        break;\n    }\n  }\n  function submitHandler() {\n    onSubmit({\n      email: enteredEmail,\n      confirmEmail: enteredConfirmEmail,\n      password: enteredPassword,\n      confirmPassword: enteredConfirmPassword\n    });\n  }\n  return _jsx(View, {\n    style: styles.form,\n    children: _jsxs(View, {\n      children: [_jsx(Input, {\n        label: \"Email Address\",\n        onUpdateValue: updateInputValueHandler.bind(this, 'email'),\n        value: enteredEmail,\n        keyboardType: \"email-address\",\n        isInvalid: emailIsInvalid\n      }), !isLogin && _jsx(Input, {\n        label: \"Confirm Email Address\",\n        onUpdateValue: updateInputValueHandler.bind(this, 'confirmEmail'),\n        value: enteredConfirmEmail,\n        keyboardType: \"email-address\",\n        isInvalid: emailsDontMatch\n      }), _jsx(Input, {\n        label: \"Password\",\n        onUpdateValue: updateInputValueHandler.bind(this, 'password'),\n        secure: true,\n        value: enteredPassword,\n        isInvalid: passwordIsInvalid\n      }), !isLogin && _jsx(Input, {\n        label: \"Confirm Password\",\n        onUpdateValue: updateInputValueHandler.bind(this, 'confirmPassword'),\n        secure: true,\n        value: enteredConfirmPassword,\n        isInvalid: passwordsDontMatch\n      }), _jsx(View, {\n        style: styles.buttons,\n        children: _jsx(Button, {\n          onPress: submitHandler,\n          children: isLogin ? 'Log In' : 'Sign Up'\n        })\n      })]\n    })\n  });\n}\nexport default AuthForm;\nvar styles = StyleSheet.create({\n  buttons: {\n    marginTop: 12\n  }\n});","map":{"version":3,"names":["useState","StyleSheet","View","Button","Input","jsx","_jsx","jsxs","_jsxs","AuthForm","_ref","isLogin","onSubmit","credentialsInvalid","_useState","_useState2","_slicedToArray","enteredEmail","setEnteredEmail","_useState3","_useState4","enteredConfirmEmail","setEnteredConfirmEmail","_useState5","_useState6","enteredPassword","setEnteredPassword","_useState7","_useState8","enteredConfirmPassword","setEnteredConfirmPassword","emailIsInvalid","email","emailsDontMatch","confirmEmail","passwordIsInvalid","password","passwordsDontMatch","confirmPassword","updateInputValueHandler","inputType","enteredValue","submitHandler","style","styles","form","children","label","onUpdateValue","bind","value","keyboardType","isInvalid","secure","buttons","onPress","create","marginTop"],"sources":["C:/MAMP/htdocs/github_novo/makeponto/makeponto/appfrontend/makepontoapp/components/Auth/AuthForm.js"],"sourcesContent":["import { useState } from 'react';\r\nimport { StyleSheet, View } from 'react-native';\r\n\r\nimport Button from '../ui/Button';\r\nimport Input from './Input';\r\n\r\nfunction AuthForm({ isLogin, onSubmit, credentialsInvalid }) {\r\n  const [enteredEmail, setEnteredEmail] = useState('');\r\n  const [enteredConfirmEmail, setEnteredConfirmEmail] = useState('');\r\n  const [enteredPassword, setEnteredPassword] = useState('');\r\n  const [enteredConfirmPassword, setEnteredConfirmPassword] = useState('');\r\n\r\n  const {\r\n    email: emailIsInvalid,\r\n    confirmEmail: emailsDontMatch,\r\n    password: passwordIsInvalid,\r\n    confirmPassword: passwordsDontMatch,\r\n  } = credentialsInvalid;\r\n\r\n  function updateInputValueHandler(inputType, enteredValue) {\r\n    switch (inputType) {\r\n      case 'email':\r\n        setEnteredEmail(enteredValue);\r\n        break;\r\n      case 'confirmEmail':\r\n        setEnteredConfirmEmail(enteredValue);\r\n        break;\r\n      case 'password':\r\n        setEnteredPassword(enteredValue);\r\n        break;\r\n      case 'confirmPassword':\r\n        setEnteredConfirmPassword(enteredValue);\r\n        break;\r\n    }\r\n  }\r\n\r\n  function submitHandler() {\r\n    onSubmit({\r\n      email: enteredEmail,\r\n      confirmEmail: enteredConfirmEmail,\r\n      password: enteredPassword,\r\n      confirmPassword: enteredConfirmPassword,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <View style={styles.form}>\r\n      <View>\r\n        <Input\r\n          label=\"Email Address\"\r\n          onUpdateValue={updateInputValueHandler.bind(this, 'email')}\r\n          value={enteredEmail}\r\n          keyboardType=\"email-address\"\r\n          isInvalid={emailIsInvalid}\r\n        />\r\n        {!isLogin && (\r\n          <Input\r\n            label=\"Confirm Email Address\"\r\n            onUpdateValue={updateInputValueHandler.bind(this, 'confirmEmail')}\r\n            value={enteredConfirmEmail}\r\n            keyboardType=\"email-address\"\r\n            isInvalid={emailsDontMatch}\r\n          />\r\n        )}\r\n        <Input\r\n          label=\"Password\"\r\n          onUpdateValue={updateInputValueHandler.bind(this, 'password')}\r\n          secure\r\n          value={enteredPassword}\r\n          isInvalid={passwordIsInvalid}\r\n        />\r\n        {!isLogin && (\r\n          <Input\r\n            label=\"Confirm Password\"\r\n            onUpdateValue={updateInputValueHandler.bind(\r\n              this,\r\n              'confirmPassword'\r\n            )}\r\n            secure\r\n            value={enteredConfirmPassword}\r\n            isInvalid={passwordsDontMatch}\r\n          />\r\n        )}\r\n        <View style={styles.buttons}>\r\n          <Button onPress={submitHandler}>\r\n            {isLogin ? 'Log In' : 'Sign Up'}\r\n          </Button>\r\n        </View>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default AuthForm;\r\n\r\nconst styles = StyleSheet.create({\r\n  buttons: {\r\n    marginTop: 12,\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}